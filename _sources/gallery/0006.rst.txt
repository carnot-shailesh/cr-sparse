
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/0006.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_0006.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_0006.py:


.. _gallery:0006:

Piecewise Cubic, Daubechies Basis, Gaussian Measurements
=============================================================

.. contents::
    :depth: 2
    :local:

In this example we have

#. A signal :math:`\by` consisting of piecewise cubic
   polynomials with 5 pieces of total length of 2048 samples.
#. A Daubechies-8 wavelet basis :math:`\Psi` of shape 2048x2048
   with 5 levels of decomposition.
#. The sparse representation :math:`\bx` of the signal :math:`\by`
   in the basis :math:`\Psi` consisting of exactly 63 nonzero
   entries (corresponding to the spikes and the amplitudes of the cosine waves).
#. A Gaussian sensing matrix :math:`\Phi` of shape  600x2048 making
   600 random measurements in a vector :math:`\bb`.
   The columns of the sensing matrix are unit normalized.
#. We are given :math:`\bb` and :math:`\bA = \Phi \Psi` and
   have to reconstruct :math:`\bx` using it.
#. Then we can use :math:`\Psi` to compute :math:`\by = \Psi \bx`.


.. math::

    \bb = \bA \bx = \Phi \Psi \bx = \Phi \by.

See also:

* :ref:`api:problems`
* :ref:`api:lop`

.. GENERATED FROM PYTHON SOURCE LINES 37-47

.. code-block:: default


    # Configure JAX to work with 64-bit floating point precision. 
    from jax.config import config
    config.update("jax_enable_x64", True)

    import jax.numpy as jnp
    import cr.nimble as crn
    import cr.sparse.plots as crplot









.. GENERATED FROM PYTHON SOURCE LINES 48-52

Setup
------------------------------
We shall construct our test signal and dictionary
using our test problems module.

.. GENERATED FROM PYTHON SOURCE LINES 52-58

.. code-block:: default


    from cr.sparse import problems
    prob = problems.generate('piecewise-cubic-poly:daubechies:gaussian')
    fig, ax = problems.plot(prob)





.. image-sg:: /gallery/images/sphx_glr_0006_001.png
   :alt: Piecewise cubic polynomial, Wavelet coefficients, Measurements
   :srcset: /gallery/images/sphx_glr_0006_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-60

Let us access the relevant parts of our test problem

.. GENERATED FROM PYTHON SOURCE LINES 60-70

.. code-block:: default


    # The combined linear operator (sensing matrix + dictionary)
    A = prob.A
    # The sparse representation of the signal in the dictionary
    x0 = prob.x
    # The Cosine+Spikes signal
    y0 = prob.y
    # The measurements
    b0 = prob.b








.. GENERATED FROM PYTHON SOURCE LINES 71-73

Check how many coefficients in the sparse representation
are sufficient to capture 99.9% of the energy of the signal

.. GENERATED FROM PYTHON SOURCE LINES 73-75

.. code-block:: default

    print(crn.num_largest_coeffs_for_energy_percent(x0, 99.9))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    115




.. GENERATED FROM PYTHON SOURCE LINES 76-78

Check how many coefficients in the sparse representation
are sufficient to capture 100% of the energy of the signal

.. GENERATED FROM PYTHON SOURCE LINES 78-80

.. code-block:: default

    print(crn.num_largest_coeffs_for_energy_percent(x0, 100))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    278




.. GENERATED FROM PYTHON SOURCE LINES 81-86

This number gives us an idea about the required sparsity
to be configured for greedy pursuit algorithms.
Although the exact sparsity of this representation is 63
but several of the spikes are too small and could be ignored
for a reasonably good approximation.

.. GENERATED FROM PYTHON SOURCE LINES 88-91

Sparse Recovery using Subspace Pursuit
-------------------------------------------
We shall use subspace pursuit to reconstruct the signal.

.. GENERATED FROM PYTHON SOURCE LINES 91-95

.. code-block:: default

    import cr.sparse.pursuit.sp as sp

    # We will first try to estimate a 100-sparse representation
    sol = sp.solve(A, b0, 100)







.. GENERATED FROM PYTHON SOURCE LINES 96-97

This utility function helps us quickly analyze the quality of reconstruction

.. GENERATED FROM PYTHON SOURCE LINES 97-99

.. code-block:: default

    problems.analyze_solution(prob, sol, perc=100)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    m: 600, n: 2048
    b_norm: original: 709.229 reconstruction: 708.631 SNR: 27.74 dB
    x_norm: original: 733.968 reconstruction: 732.596 SNR: 26.09 dB
    y_norm: original: 733.967 reconstruction: 732.596 SNR: 26.09 dB
    Sparsity: original: 278, reconstructed: 100, overlap: 100, ratio: 0.360
    Iterations: 20 





.. GENERATED FROM PYTHON SOURCE LINES 100-101

We will now try to estimate a 150-sparse representation

.. GENERATED FROM PYTHON SOURCE LINES 101-102

.. code-block:: default

    sol = sp.solve(A, b0, 150)







.. GENERATED FROM PYTHON SOURCE LINES 103-105

Let us check if we correctly decoded all the nonzero entries
in the sparse representation x

.. GENERATED FROM PYTHON SOURCE LINES 105-108

.. code-block:: default

    problems.analyze_solution(prob, sol, perc=100)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    m: 600, n: 2048
    b_norm: original: 709.229 reconstruction: 709.194 SNR: 40.17 dB
    x_norm: original: 733.968 reconstruction: 733.994 SNR: 37.55 dB
    y_norm: original: 733.967 reconstruction: 733.994 SNR: 37.55 dB
    Sparsity: original: 278, reconstructed: 150, overlap: 150, ratio: 0.540
    Iterations: 20 





.. GENERATED FROM PYTHON SOURCE LINES 109-110

We will now try to estimate a 200-sparse representation

.. GENERATED FROM PYTHON SOURCE LINES 110-111

.. code-block:: default

    sol = sp.solve(A, b0, 200)







.. GENERATED FROM PYTHON SOURCE LINES 112-114

Let us check if we correctly decoded all the nonzero entries
in the sparse representation x

.. GENERATED FROM PYTHON SOURCE LINES 114-116

.. code-block:: default

    problems.analyze_solution(prob, sol, perc=100)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    m: 600, n: 2048
    b_norm: original: 709.229 reconstruction: 709.228 SNR: 57.63 dB
    x_norm: original: 733.968 reconstruction: 734.022 SNR: 54.44 dB
    y_norm: original: 733.967 reconstruction: 734.022 SNR: 54.44 dB
    Sparsity: original: 278, reconstructed: 200, overlap: 200, ratio: 0.719
    Iterations: 20 





.. GENERATED FROM PYTHON SOURCE LINES 117-118

We will now try to estimate a 250-sparse representation

.. GENERATED FROM PYTHON SOURCE LINES 118-119

.. code-block:: default

    sol = sp.solve(A, b0, 250)







.. GENERATED FROM PYTHON SOURCE LINES 120-122

Let us check if we correctly decoded all the nonzero entries
in the sparse representation x

.. GENERATED FROM PYTHON SOURCE LINES 122-124

.. code-block:: default

    problems.analyze_solution(prob, sol, perc=100)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    m: 600, n: 2048
    b_norm: original: 709.229 reconstruction: 709.229 SNR: 88.12 dB
    x_norm: original: 733.968 reconstruction: 733.968 SNR: 83.66 dB
    y_norm: original: 733.967 reconstruction: 733.968 SNR: 83.66 dB
    Sparsity: original: 278, reconstructed: 250, overlap: 250, ratio: 0.899
    Iterations: 19 





.. GENERATED FROM PYTHON SOURCE LINES 125-126

The estimated sparse representation

.. GENERATED FROM PYTHON SOURCE LINES 126-127

.. code-block:: default

    x = sol.x







.. GENERATED FROM PYTHON SOURCE LINES 128-129

Let us reconstruct the signal from this sparse representation

.. GENERATED FROM PYTHON SOURCE LINES 129-130

.. code-block:: default

    y = prob.reconstruct(x)







.. GENERATED FROM PYTHON SOURCE LINES 131-132

The estimated measurements

.. GENERATED FROM PYTHON SOURCE LINES 132-134

.. code-block:: default

    b = A.times(x)








.. GENERATED FROM PYTHON SOURCE LINES 135-136

Let us visualize the original and reconstructed representation

.. GENERATED FROM PYTHON SOURCE LINES 136-145

.. code-block:: default

    def plot_representations(x0, x):
        ax = crplot.h_plots(2, height=2)
        ax[0].stem(x0, markerfmt='.')
        ax[0].set_title('Original representation')
        ax[1].stem(x, markerfmt='.')
        ax[1].set_title('Reconstructed representation')
    plot_representations(x0, x)





.. image-sg:: /gallery/images/sphx_glr_0006_002.png
   :alt: Original representation, Reconstructed representation
   :srcset: /gallery/images/sphx_glr_0006_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 146-147

Let us visualize the original and reconstructed signal

.. GENERATED FROM PYTHON SOURCE LINES 147-155

.. code-block:: default

    def plot_signals(y0, y):
        ax = crplot.h_plots(2, height=2)
        ax[0].plot(y0)
        ax[0].set_title('Original signal')
        ax[1].plot(y)
        ax[1].set_title('Reconstructed signal')
    plot_signals(y0, y)




.. image-sg:: /gallery/images/sphx_glr_0006_003.png
   :alt: Original signal, Reconstructed signal
   :srcset: /gallery/images/sphx_glr_0006_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 156-157

Let us visualize the original and reconstructed measurements

.. GENERATED FROM PYTHON SOURCE LINES 157-166

.. code-block:: default

    def plot_measurments(b0, b):
        ax = crplot.h_plots(2, height=2)
        ax[0].plot(b0)
        ax[0].set_title('Original measurements')
        ax[1].plot(b)
        ax[1].set_title('Reconstructed measurements')
    plot_measurments(b0, b)





.. image-sg:: /gallery/images/sphx_glr_0006_004.png
   :alt: Original measurements, Reconstructed measurements
   :srcset: /gallery/images/sphx_glr_0006_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 167-168

We will now try to estimate a 278-sparse representation

.. GENERATED FROM PYTHON SOURCE LINES 168-169

.. code-block:: default

    sol = sp.solve(A, b0, 278)







.. GENERATED FROM PYTHON SOURCE LINES 170-172

Let us check if we correctly decoded all the nonzero entries
in the sparse representation x

.. GENERATED FROM PYTHON SOURCE LINES 172-176

.. code-block:: default

    problems.analyze_solution(prob, sol, perc=100)







.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    m: 600, n: 2048
    b_norm: original: 709.229 reconstruction: 709.229 SNR: 83.64 dB
    x_norm: original: 733.968 reconstruction: 733.968 SNR: 76.35 dB
    y_norm: original: 733.967 reconstruction: 733.968 SNR: 76.35 dB
    Sparsity: original: 278, reconstructed: 277, overlap: 243, ratio: 0.874
    Iterations: 18 





.. GENERATED FROM PYTHON SOURCE LINES 177-179

Sparse Recovery using SPGL1
---------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-185

.. code-block:: default

    import cr.sparse.cvx.spgl1 as crspgl1
    sigma = 0.01 * jnp.linalg.norm(b0)
    options = crspgl1.SPGL1Options(max_iters=1000)
    sol = crspgl1.solve_bpic_jit(A, b0, sigma, options=options)
    problems.analyze_solution(prob, sol, perc=100)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    m: 600, n: 2048
    b_norm: original: 709.229 reconstruction: 706.592 SNR: 40.00 dB
    x_norm: original: 733.968 reconstruction: 722.265 SNR: 27.61 dB
    y_norm: original: 733.967 reconstruction: 722.265 SNR: 27.61 dB
    Sparsity: original: 278, reconstructed: 464, overlap: 182, ratio: 0.392
    Iterations: 109 n_times: 169, n_trans: 126





.. GENERATED FROM PYTHON SOURCE LINES 186-187

Try with lower threshold on allowed noise

.. GENERATED FROM PYTHON SOURCE LINES 187-192

.. code-block:: default

    sigma = 0.001 * jnp.linalg.norm(b0)
    options = crspgl1.SPGL1Options(max_iters=1000)
    sol = crspgl1.solve_bpic_jit(A, b0, sigma, options=options)
    problems.analyze_solution(prob, sol, perc=100)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    m: 600, n: 2048
    b_norm: original: 709.229 reconstruction: 708.995 SNR: 60.00 dB
    x_norm: original: 733.968 reconstruction: 725.669 SNR: 29.33 dB
    y_norm: original: 733.967 reconstruction: 725.669 SNR: 29.33 dB
    Sparsity: original: 278, reconstructed: 615, overlap: 196, ratio: 0.319
    Iterations: 469 n_times: 847, n_trans: 510





.. GENERATED FROM PYTHON SOURCE LINES 193-194

The estimated sparse representation

.. GENERATED FROM PYTHON SOURCE LINES 194-195

.. code-block:: default

    x = sol.x







.. GENERATED FROM PYTHON SOURCE LINES 196-197

Let us reconstruct the signal from this sparse representation

.. GENERATED FROM PYTHON SOURCE LINES 197-198

.. code-block:: default

    y = prob.reconstruct(x)







.. GENERATED FROM PYTHON SOURCE LINES 199-200

The estimated measurements

.. GENERATED FROM PYTHON SOURCE LINES 200-203

.. code-block:: default

    b = A.times(x)









.. GENERATED FROM PYTHON SOURCE LINES 204-205

Let us visualize the original and reconstructed representation

.. GENERATED FROM PYTHON SOURCE LINES 205-208

.. code-block:: default

    plot_representations(x0, x)





.. image-sg:: /gallery/images/sphx_glr_0006_005.png
   :alt: Original representation, Reconstructed representation
   :srcset: /gallery/images/sphx_glr_0006_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 209-210

Let us visualize the original and reconstructed signal

.. GENERATED FROM PYTHON SOURCE LINES 210-212

.. code-block:: default

    plot_signals(y0, y)




.. image-sg:: /gallery/images/sphx_glr_0006_006.png
   :alt: Original signal, Reconstructed signal
   :srcset: /gallery/images/sphx_glr_0006_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 213-214

Let us visualize the original and reconstructed measurements

.. GENERATED FROM PYTHON SOURCE LINES 214-217

.. code-block:: default

    plot_measurments(b0, b)





.. image-sg:: /gallery/images/sphx_glr_0006_007.png
   :alt: Original measurements, Reconstructed measurements
   :srcset: /gallery/images/sphx_glr_0006_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 218-254

Comments
---------

* We need 115 coefficients in the representation in the
  Daubechies basis to cover 99.9% of the signal energy.
  There are a total of 278 nonzero coefficients. 

Subspace Pursuit

* With K=100 (< 115), Subspace Pursuit recovery is not very good (low SNR).
  It converges in 20 iterations.
* With K=150, SP is pretty good.
  All detected nonzero coefficients are part of the true support.
* With K=200, the SNR further improves to 54 dB.
* With K=250, the SNR further improves to 83 dB.
  All detected coefficients are correct so far.
* Pushing the sparsity to K=278 stars causing problems however.
  We can see the SNR drop to 76 dB.
  We can notice that only 243 of the detected 277 coefficients
  are correct coefficients.

SPGL1

* We use the basis pursuit with inequality constraints version of
  SPGL1 in this example.
* The allowed sigma for the residual norm :math:`\| \bA \bx - \bb \|_2`
  is chosen as a fraction of the norm of the measurements :math:`\| \bb \|_2`.
* At a fraction of 0.01, SPGL1 converges in 106 iterations giving an
  SNR of 27 dB.
* At a fraction of 0.001, SPGL1 converges in 486 iterations
  with an improved SNR of 29 dB.
* It is interesting to note that while the measurement SNR has improved
  remarkably from 40 dB to 60 dB (as the target residual norm has reduced
  by a factor of 10), the improvement in signal SNR is not that good.
  Having a tighter bound on residual norm doesn't lead significantly better
  reconstruction.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.967 seconds)


.. _sphx_glr_download_gallery_0006.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 0006.py <0006.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 0006.ipynb <0006.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
