
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/pursuit/cs1bit_biht.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_pursuit_cs1bit_biht.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_pursuit_cs1bit_biht.py:


1 bit Compressive Sensing
==========================

This example demonstrates following features
- Making 1-bit quantized compressive measurements of a sparse signal 
- Recovering the original signal using the BIHT (Binary Iterative Hard Thresholding) algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 12-13

Let's import necessary libraries 

.. GENERATED FROM PYTHON SOURCE LINES 13-26

.. code-block:: default

    import jax.numpy as jnp
    from jax.numpy.linalg import norm

    import matplotlib as mpl
    import matplotlib.pyplot as plt

    import cr.nimble as cnb
    import cr.sparse as crs
    import cr.sparse.dict as crdict
    import cr.sparse.data as crdata
    import cr.sparse.cs.cs1bit as cs1bit









.. GENERATED FROM PYTHON SOURCE LINES 27-29

Setup
------

.. GENERATED FROM PYTHON SOURCE LINES 29-37

.. code-block:: default


    # Number of measurements
    M = 256
    # Ambient dimension
    N = 512
    # Sparsity level
    K = 4








.. GENERATED FROM PYTHON SOURCE LINES 38-40

Sensing Matrix
------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 40-50

.. code-block:: default

    Phi = crdict.gaussian_mtx(cnb.KEYS[0], M, N, normalize_atoms=False)
    # frame bound
    s0 = crdict.upper_frame_bound(Phi)
    print(s0)
    fig=plt.figure(figsize=(8,6), dpi= 100, facecolor='w', edgecolor='k')
    plt.imshow(Phi, extent=[0, 2, 0, 1])
    plt.gray()
    plt.colorbar()
    plt.title(r'$\Phi$')




.. image-sg:: /gallery/pursuit/images/sphx_glr_cs1bit_biht_001.png
   :alt: $\Phi$
   :srcset: /gallery/pursuit/images/sphx_glr_cs1bit_biht_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    2.4003416483791433

    Text(0.5, 1.0, '$\\Phi$')



.. GENERATED FROM PYTHON SOURCE LINES 51-53

K-sparse signal
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 53-61

.. code-block:: default

    x, omega = crdata.sparse_normal_representations(cnb.KEYS[1], N, K)
    # normalize signal
    x = x / norm(x)
    # the support indices
    print(omega)
    fig=plt.figure(figsize=(8,6), dpi= 100, facecolor='w', edgecolor='k')
    plt.stem(x, markerfmt='.')




.. image-sg:: /gallery/pursuit/images/sphx_glr_cs1bit_biht_002.png
   :alt: cs1bit biht
   :srcset: /gallery/pursuit/images/sphx_glr_cs1bit_biht_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 56 128 138 367]

    <StemContainer object of 3 artists>



.. GENERATED FROM PYTHON SOURCE LINES 62-65

Measurement process
------------------------------------------------
measurements

.. GENERATED FROM PYTHON SOURCE LINES 65-70

.. code-block:: default

    y = cs1bit.measure_1bit(Phi, x)
    fig=plt.figure(figsize=(8,6), dpi= 100, facecolor='w', edgecolor='k')
    plt.stem(y, markerfmt='.')
    print(y)




.. image-sg:: /gallery/pursuit/images/sphx_glr_cs1bit_biht_003.png
   :alt: cs1bit biht
   :srcset: /gallery/pursuit/images/sphx_glr_cs1bit_biht_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-1. -1.  1.  1.  1. -1. -1. -1. -1. -1.  1.  1.  1. -1. -1.  1. -1. -1.
     -1. -1. -1. -1.  1.  1. -1. -1. -1.  1.  1.  1.  1. -1. -1.  1. -1. -1.
      1.  1. -1.  1.  1.  1. -1. -1.  1. -1. -1.  1. -1. -1.  1.  1.  1.  1.
      1. -1. -1. -1. -1. -1. -1. -1.  1.  1. -1. -1.  1.  1. -1.  1. -1.  1.
      1. -1. -1.  1. -1.  1. -1.  1. -1. -1.  1. -1. -1.  1. -1. -1. -1. -1.
     -1.  1.  1. -1.  1.  1.  1. -1. -1.  1. -1. -1. -1. -1. -1. -1.  1. -1.
      1.  1. -1. -1. -1.  1. -1. -1. -1. -1.  1. -1. -1. -1.  1.  1.  1.  1.
     -1. -1. -1. -1.  1.  1. -1. -1.  1.  1. -1.  1. -1. -1.  1. -1.  1. -1.
      1. -1.  1.  1. -1. -1. -1. -1.  1. -1. -1. -1.  1. -1.  1. -1.  1.  1.
      1. -1.  1. -1. -1.  1. -1.  1.  1. -1.  1.  1. -1. -1.  1. -1.  1. -1.
     -1. -1.  1. -1.  1.  1. -1.  1. -1.  1.  1. -1.  1. -1. -1.  1.  1.  1.
     -1. -1.  1. -1. -1.  1.  1.  1. -1.  1. -1.  1.  1.  1. -1.  1. -1. -1.
     -1. -1.  1. -1. -1.  1. -1.  1.  1.  1. -1.  1.  1.  1. -1.  1.  1.  1.
     -1.  1. -1. -1.  1.  1.  1. -1.  1. -1.  1.  1. -1.  1.  1. -1.  1. -1.
      1. -1. -1.  1.]




.. GENERATED FROM PYTHON SOURCE LINES 71-74

Signal Reconstruction using BIHT
------------------------------------------------
solver step-size

.. GENERATED FROM PYTHON SOURCE LINES 74-77

.. code-block:: default

    tau = 0.98 * s0
    # solution
    sol = cs1bit.biht_jit(Phi, y, K, tau)







.. GENERATED FROM PYTHON SOURCE LINES 78-79

reconstructed signal

.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: default

    x_rec = crs.build_signal_from_indices_and_values(N, sol.I, sol.x_I)








.. GENERATED FROM PYTHON SOURCE LINES 82-84

Verification
------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 84-95

.. code-block:: default

    fig=plt.figure(figsize=(8,6), dpi= 100, facecolor='w', edgecolor='k')
    plt.subplot(211)
    plt.title('original')
    plt.stem(x, markerfmt='.', linefmt='gray')
    plt.subplot(212)
    plt.stem(x_rec, markerfmt='.')
    plt.title('reconstruction')

    # recovered support
    I = jnp.sort(sol.I)
    print(I)



.. image-sg:: /gallery/pursuit/images/sphx_glr_cs1bit_biht_004.png
   :alt: original, reconstruction
   :srcset: /gallery/pursuit/images/sphx_glr_cs1bit_biht_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 56 128 138 367]




.. GENERATED FROM PYTHON SOURCE LINES 96-97

check if the support is recovered correctly

.. GENERATED FROM PYTHON SOURCE LINES 97-104

.. code-block:: default

    print(jnp.array_equal(omega, I))
    # normalize recovered signal
    x_rec = x_rec / norm(x_rec)
    # the norm of error
    print(norm(x - x_rec))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    True
    0.024352999672904573





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.099 seconds)


.. _sphx_glr_download_gallery_pursuit_cs1bit_biht.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: cs1bit_biht.py <cs1bit_biht.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: cs1bit_biht.ipynb <cs1bit_biht.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
